<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/stylesheets/problem.css">
    <script src="https://code.jquery.com/jquery-3.5.0.js"
    integrity="sha256-r/AaFHrszJtwpe+tHyNi/XCfMxYpbsRg2Uqn0x3s2zc=" crossorigin="anonymous"></script>
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'><script src="https://kit.fontawesome.com/26d2eb4962.js" crossorigin="anonymous"></script>
</head>

<body>
    <div class="main">
        <div class="problem_part">
            <div class="num_list">
                <div class="num" onclick="click_this(this)">1</div>
                <div class="num" onclick="click_this(this)">2</div>
                <div class="num" onclick="click_this(this)">3</div>
                <div class="num" onclick="click_this(this)">4</div>
                <div class="num" onclick="click_this(this)">5</div>
                <div class="num" onclick="click_this(this)">6</div>
                <div class="num" onclick="click_this(this)">7</div>
                <div class="num" onclick="click_this(this)">8</div>
                <div class="num" onclick="click_this(this)">9</div>
                <div class="num" onclick="click_this(this)">10</div>
            </div>
        </div>
        <div class="note_part">
            <div style="height: 100%; width:30px; border-right: 1px solid rgb(241, 241, 241);">
                <div class="pencil" onclick="click_this_tool(this)">
                    <svg style="height: 100%;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" style="fill: rgba(0, 0, 0, 1);transform: msFilter;"><path d="M4 21a1 1 0 0 0 .24 0l4-1a1 1 0 0 0 .47-.26L21 7.41a2 2 0 0 0 0-2.82L19.42 3a2 2 0 0 0-2.83 0L4.3 15.29a1.06 1.06 0 0 0-.27.47l-1 4A1 1 0 0 0 3.76 21 1 1 0 0 0 4 21zM18 4.41 19.59 6 18 7.59 16.42 6zM5.91 16.51 15 7.41 16.59 9l-9.1 9.1-2.11.52z"></path></svg>
                </div>
                <div class="neon" onclick="click_this_tool(this)">
                    <i class="fas fa-highlighter" style="margin:auto"></i>
                </div>
                <div class="eraser" onclick="click_this_tool(this)">
                    <svg style="height:100%;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);transform:msFilter"><path d="M12.48 3 7.73 7.75 3 12.59a2 2 0 0 0 0 2.82l4.3 4.3A1 1 0 0 0 8 20h12v-2h-7l7.22-7.22a2 2 0 0 0 0-2.83L15.31 3a2 2 0 0 0-2.83 0zM8.41 18l-4-4 4.75-4.84.74-.75 4.95 4.95-4.56 4.56-.07.08z"></path></svg>
                </div>
                <div class="black" onclick="click_this_color(this)">
                    <div class="black_dot"></div>
                </div>
                <div class="red" onclick="click_this_color(this)">
                    <div class="red_dot"></div>
                </div>
                <div class="yellow" onclick="click_this_color(this)">
                    <div class="yellow_dot"></div>
                </div>
                <div class="blue" onclick="click_this_color(this)">
                    <div class="blue_dot"></div>
                </div>
                <div class="small" onclick="click_this_size(this)">
                    <div class="small_dot"></div>
                </div>
                <div class="medium" onclick="click_this_size(this)"><div class="medium_dot"></div></div>
                <div class="large" onclick="click_this_size(this)"><div class="large_dot"></div></div>
            </div>  
            <div class="enabledrawing">
                <canvas id="canvas" style="border:1px solid black;"></canvas>
            </div>
        </div>
    </div>
    <script>
        window.onload = ()=>{
            document.getElementById('canvas').setAttribute('width', $('.enabledrawing').width())
            document.getElementById('canvas').setAttribute('height', $('.enabledrawing').height())
        }
        function click_this(a) {
            for (let i = 0; i < 10; i++) {
                document.querySelectorAll('.num')[i].classList.remove('num_style')
            }
            let value = a
            value.classList.add('num_style')
        }
        function click_this_tool(a){
            document.querySelector('.pencil').classList.remove('tool_style')
            document.querySelector('.neon').classList.remove('tool_style')
            document.querySelector('.eraser').classList.remove('tool_style')
            let value = a;
            value.classList.add('tool_style')
        }
        function click_this_color(a){
            document.querySelector('.black').classList.remove('tool_style')
            document.querySelector('.red').classList.remove('tool_style')
            document.querySelector('.blue').classList.remove('tool_style')
            document.querySelector('.yellow').classList.remove('tool_style')
            let value = a;
            value.classList.add('tool_style')
        }
        function click_this_size(a){
            document.querySelector('.small').classList.remove('tool_style')
            document.querySelector('.medium').classList.remove('tool_style')
            document.querySelector('.large').classList.remove('tool_style')
            let value = a;
            value.classList.add('tool_style')
        }

        // let isAbleDraw = false;
        // const options = {
        //     type: 'stroke',
        //     strokeStyle: 'black',
        //     lineWidth: 5,
        // };


        const rects = [];
        let currentRect = null;
        document.getElementById('canvas').addEventListener('mousedown', () => {
            isAbleDraw = true;
            currentRect = {
                type: 'stroke',
                strokeStyle: 'black',
                lineWidth: '5',
                coordinates: [],
            };
        });
        document.getElementById('canvas').addEventListener('mousemove', (e) => {
            if (isAbleDraw) {
                const ctx = e.target.getContext('2d');
                const [x, y] = [e.offsetX, e.offsetY];
                currentRect.coordinates.push([x, y]);
                drawTools.clear();
                drawTools.execute(rects);
                if (currentRect.type === 'stroke') drawTools.stroke(currentRect.coordinates, 'rgba(255, 255, 0, .3)', currentRect.lineWidth);
                if (currentRect.type === 'eraser') drawTools.eraser(currentRect.coordinates, currentRect.lineWidth);
                if (currentRect.type === 'square') drawTools.square(currentRect.coordinates, 'rgba(255, 255, 0, .3)');
            }
        });
        document.getElementById('canvas').addEventListener('mouseup', () => {
            isAbleDraw = false;
            rects.push(currentRect);
            drawTools.clear();
            currentRect = null;
            drawTools.execute(rects);
            console.log(rects);
        })
        document.getElementById('canvas').addEventListener('touchstart', () => {
            isAbleDraw = true;
            currentRect = {
                type: 'stroke',
                strokeStyle: 'black',
                lineWidth: '5',
                coordinates: [],
            };
        });
        document.getElementById('canvas').addEventListener('touchmove', (e) => {
            if (isAbleDraw) {
                const ctx = e.target.getContext('2d');
                const [x, y] = [e.offsetX, e.offsetY];
                currentRect.coordinates.push([x, y]);
                drawTools.clear();
                drawTools.execute(rects);
                if (currentRect.type === 'stroke') drawTools.stroke(currentRect.coordinates, 'rgba(255, 255, 0, .3)', currentRect.lineWidth);
                if (currentRect.type === 'eraser') drawTools.eraser(currentRect.coordinates, currentRect.lineWidth);
                if (currentRect.type === 'square') drawTools.square(currentRect.coordinates, 'rgba(255, 255, 0, .3)');
            }
        });
        document.getElementById('canvas').addEventListener('touchend', () => {
            isAbleDraw = false;
            rects.push(currentRect);
            drawTools.clear();
            currentRect = null;
            drawTools.execute(rects);
            console.log(rects);
        })

        const drawTools = {
            clear() {
            	// 캔버스 내용 제거
                const canvas = document.getElementById('canvas');
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            },
            stroke(coordinates, color, lineWidth) {
            	// 마우스가 이동한 경로를 따라 실선 그리기
                if (coordinates.length > 0) {
                    const ctx = document.getElementById('canvas').getContext('2d');
                    const firstCoordinate = coordinates[0];
                    ctx.beginPath();
                    ctx.moveTo(firstCoordinate[0], firstCoordinate[1]);
                    for (let i = 1; i < coordinates.length; i += 1) {
                        ctx.lineTo(coordinates[i][0], coordinates[i][1]);
                    }
                    ctx.strokeStyle = color;
                    ctx.lineWidth = lineWidth;
                    ctx.stroke();
                    ctx.closePath();
                }
            },
            eraser(coordinates, lineWidth) {
            	// 마우스가 이동한 좌표에 따라 하얀색으로 원을 그려서 지우개 기능처럼 동작
                const canvas = document.getElementById('canvas');
                const ctx = canvas.getContext('2d');
                for (let i = 0; i < coordinates.length; i += 1) {
                    ctx.beginPath();
                    const coordinate = coordinates[i];
                    const [x, y] = coordinate;
                    ctx.fillStyle = 'white';
                    ctx.arc(x, y, lineWidth / 2, 0, Math.PI * 2);
                    ctx.fill();
                    ctx.closePath();
                }
            },
            execute(rects) {
            	// rects 배열에 저장 된 도형을 기준으로 다시 캔버스에 그림
                for (let i = 0; i < rects.length;  i += 1) {
                    const rect = rects[i];
                    const { type } = rect;
                    if (type === 'stroke') this.stroke(rect.coordinates, rect.strokeStyle, rect.lineWidth);
                    if (type === 'eraser') this.eraser(rect.coordinates, rect.lineWidth);
                    if (type === 'square') this.square(rect.coordinates, rect.strokeStyle);
                }
            },
            square(coordinates, color) {
            	// 사각 도형을 그림
                const canvas = document.getElementById('canvas');
                const ctx = canvas.getContext('2d');
                const start = coordinates[0];
                const end = coordinates[coordinates.length - 1];
                const [startX, startY] = start;
                const [endX, endY] = [end[0] - startX, end[1] - startY];
                ctx.beginPath();
                ctx.fillStyle = color;
                ctx.fillRect(startX, startY, endX, endY);
                ctx.closePath();
            },
        };
        document.getElementById('type').addEventListener('change', (e) => {
            options.type = e.target.value;
        });
        document.getElementById('strokeStyle').addEventListener('change', (e) => {
            options.strokeStyle = e.target.value;
        });
        document.getElementById('lineWidth').addEventListener('change', (e) => {
            options.lineWidth = e.target.value;
        });
    </script>
</body>

</html>